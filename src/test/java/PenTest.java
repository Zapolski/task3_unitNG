
import org.testng.annotations.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import static org.testng.Assert.*;

public class PenTest {

    public Pen penWithArgs_500_2_RED = new Pen(500,2,"RED");

    @Test
    public void testIsWorkPozitiveInkContainerValue() {
        Boolean actual = penWithArgs_500_2_RED.isWork();
        Boolean expected = true;
        assertEquals(actual,expected);
    }

    @Test
    public void testIsWorkNegativeInkContainerValue() {
        Pen pen = new Pen(-500,2,"RED");
        Boolean actual = pen.isWork();
        Boolean expected = false;
        assertEquals(actual,expected);
    }

    @Test
    public void testIsWorkZeroInkContainerValue() {
        Pen pen = new Pen(0,2,"RED");
        Boolean actual = pen.isWork();
        Boolean expected = false;
        assertEquals(actual,expected);
    }

    @Test
    public void testGetColorValidValue() {
        Pen pen = new Pen(0,2,"RED");
        String actual = pen.getColor();
        String expected = "RED";
        assertEquals(actual,expected);
    }

    @Test
    public void testGetColorNullValue() {
        Pen pen = new Pen(0,2,null);
        String actual = pen.getColor();
        String expected = null;
        assertEquals(actual,expected);
    }

    @Test
    public void testGetColorEmptyValue() {
        Pen pen = new Pen(0,2,"");
        String actual = pen.getColor();
        String expected = "";
        assertEquals(actual,expected);
    }


    @Test
    public void testWrite_EnoughInk_testReturnedWord() {
        String actual = penWithArgs_500_2_RED.write("word");
        String expected = "word";
        assertEquals(actual,expected);
    }

    @Test
    public void testWrite_EnoughInk_testReturnedWordEmpty() {
        String actual = penWithArgs_500_2_RED.write("");
        String expected = "";
        assertEquals(actual,expected);
    }

    @Test
    public void testWrite_EnoughInk_testReturnedWordNull() {
        String actual = penWithArgs_500_2_RED.write(null);
        String expected = null;
        assertEquals(actual,expected);
    }


    @Test
    public void testWrite_PenNotWork_testReturnedWord() {
        Pen pen = new Pen(0,2,"RED");
        String actual = pen.write("word");
        String expected = "";
        assertEquals(actual,expected);
    }


    @Test
    public void testWrite_EnoughInk_testInkCorrection() {
        Pen pen = new Pen(6,1,"RED");
        List<String> listActual = new ArrayList<String>();
        List<String> listExpected = new ArrayList<String>();

        listExpected.add("a");
        listExpected.add("aa");
        listExpected.add("aaa");
        listExpected.add("");

        listActual.add(pen.write("a"));
        listActual.add(pen.write("aa"));
        listActual.add(pen.write("aaa"));
        listActual.add(pen.write("aaaa"));

        assertEquals(listActual,listExpected);
    }

    @Test
    public void testWrite_NotEnoughInk_testReturnedWord() {
        Pen pen = new Pen(6,2,"RED");
        String actual = pen.write("word");
        String expected = "wor";
        assertEquals(actual,expected);
    }

    @Test
    public void testConstructorWithInkContainerValue() throws NoSuchFieldException, IllegalAccessException{
        Pen pen = new Pen(500);
        Field field = Pen.class.getDeclaredField("inkContainerValue");
        field.setAccessible(true);
        int actual = (Integer)field.get(pen);
        int expected = 500;
        assertEquals(actual, expected);
    }

    @Test
    public void testConstructorWithSizeLetter() throws NoSuchFieldException, IllegalAccessException{
        Pen pen = new Pen(500,4.5);
        Field field = Pen.class.getDeclaredField("sizeLetter");
        field.setAccessible(true);
        double actual = (Double) field.get(pen);
        double expected = 4.5;
        assertEquals(actual, expected);
    }

    @Test
    public void testConstructorWithColor() throws NoSuchFieldException, IllegalAccessException{
        Pen pen = new Pen(500,4.5,"White");
        Field field = Pen.class.getDeclaredField("color");
        field.setAccessible(true);
        String actual = (String) field.get(pen);
        String expected = "White";
        assertEquals(actual, expected);
    }

    @Test
    public void testDoSomethingElse() throws NoSuchFieldException, IllegalAccessException{
        PrintStream consoleStream = System.out;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream stream = new PrintStream(outputStream);
        System.setOut(stream);

        Pen pen = new Pen(500,4.5,"White");
        pen.doSomethingElse();

        String actual = outputStream.toString();

        System.setOut(consoleStream);


        Field field = Pen.class.getDeclaredField("color");
        field.setAccessible(true);
        String expected = ((String) field.get(pen)+"\r\n");

        assertEquals(actual, expected);
    }
}